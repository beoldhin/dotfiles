#!/usr/bin/env python3

import sys
import urllib.request
from metar import Metar

class MetarsConfMetric1:
    temperatureUnit = 'C'
    temperatureSym = '°C'
    pressureUnit = 'HPA'
    pressureSym = 'hPa'
    speedUnit = 'MPS'
    speedSym = 'm/s'
    distanceUnit = 'KM'
    distanceSym = 'km'
    precipitationUnit = 'CM'
    precipitationSym = 'cm'

class MetarsConfImperial1:
    temperatureUnit = 'F'
    temperatureSym = '°F'
    pressureUnit = 'HPA'
    pressureSym = 'hPa'
    speedUnit = 'MPH'
    speedSym = 'mph'
    distanceUnit = 'FT'
    distanceSym = 'feet'
    precipitationUnit = 'IN'
    precipitationSym = 'in'

class Metars:
    obs = {}
    metrics = None
    station = None
    url = 'https://tgftp.nws.noaa.gov/data/observations/metar/stations/{}.TXT'
    def __init__(self, metrics):
        self.metrics = metrics
    def getChillMetric(self, temp, velocity):
        # temp = celcius
        # velocity = km/h
        expt = velocity ** 0.16
        twc = 13.12 + (0.6215 * temp) - (11.37 * expt) + (0.3965 * temp * expt)
        return twc
    def convertCelciusTo(self, temp):
        if self.metrics.temperatureUnit == 'C':
            return temp
        if self.metrics.temperatureUnit == 'F':
            return (temp * 1.8) + 32
        if self.metrics.temperatureUnit == 'K':
            return temp + 273.15
        return 0
    def extractObservations(self, obs):
        if obs.station_id:
            self.obs['station_id'] = obs.station_id
        if obs.time:
            self.obs['time'] = obs.time.isoformat()
        if obs.cycle:
            self.obs['cycle'] = obs.cycle
        if obs.wind_dir:
            self.obs['wind_dir'] = obs.wind_dir.compass()
        if obs.wind_speed:
            speed = obs.wind_speed.value(self.metrics.speedUnit)
            self.obs['wind_speed'] = '{} {}'.format(round(speed), self.metrics.speedSym)
        if obs.wind_gust:
            speedgust = obs.wind_gust.value(self.metrics.speedUnit)
            self.obs['wind_gust'] = '{} {}'.format(round(speedgust), self.metrics.speedSym)
        if obs.vis:
            distance = obs.vis.value(self.metrics.distanceUnit)
            self.obs['vis'] = '{} {}'.format(round(distance), self.metrics.distanceSym)
        if obs.temp:
            temp = obs.temp.value(self.metrics.temperatureUnit)
            self.obs['temp'] = '{} {}'.format(round(temp,1), self.metrics.temperatureSym)
        if obs.dewpt:
            dewpt = obs.dewpt.value(self.metrics.temperatureUnit)
            self.obs['dewpt'] = '{} {}'.format(round(dewpt,1), self.metrics.temperatureSym)
        if obs.press:
            pressure = obs.press.value(self.metrics.pressureUnit)
            self.obs['press'] = '{} {}'.format(round(pressure), self.metrics.pressureSym)
        if 'temp' in self.obs:
            tempInCelsius = obs.temp.value('C')
            if 'wind_speed' in self.obs:
                speedInKmh = obs.wind_speed.value('KMH')
                twc = self.convertCelciusTo(self.getChillMetric(tempInCelsius, speedInKmh))
                self.obs['twc'] = '{} {}'.format(round(twc,1), self.metrics.temperatureSym)
            if 'wind_gust' in self.obs:
                speedInKmh = obs.wind_speed.value('KMH')
                twc = self.convertCelciusTo(self.getChillMetric(tempInCelsius, speedInKmh))
                self.obs['twcgust'] = '{} {}'.format(round(twc,1), self.metrics.temperatureSym)
        # print(self.obs)
    def getStationData(self, station):
        url = self.url.format(station)
        page = urllib.request.urlopen(url)
        metartext = str(page.read()).split('\\n')
        if len(metartext) < 2:
            print('Metar error')
            sys.exit(0)
        obs = Metar.Metar(metartext[1])
        return obs
    def createWeatherString(self, obs):
        weather = ''
        if 'station_id' in self.obs:
            weather += self.obs['station_id'] + ':'
        else:
            weather += '?:'
        if 'temp' in self.obs:
            weather += ' ' + self.obs['temp']
        if 'dewpt' in self.obs:
            weather += ' dewpt ' + self.obs['dewpt']
        if 'twc' in self.obs:
            weather += ' feels ' + self.obs['twc']
        if 'twcgust' in self.obs:
            weather += ' feelsgust ' + self.obs['twcgust']
        if 'wind_dir' in self.obs or 'wind_speed' in self.obs:
            weather += ' wind'
        if 'wind_dir' in self.obs:
            weather += ' ' + self.obs['wind_dir']
        if 'wind_dir' in self.obs and 'wind_speed' in self.obs:
            weather += ' at'
        if 'wind_speed' in self.obs:
            weather += ' ' + self.obs['wind_speed']
        if 'wind_gust' in self.obs:
            weather += ' gusts ' + self.obs['wind_gust']
        if 'press'  in self.obs:
            weather += ' press ' + self.obs['press']
        if 'vis' in self.obs:
            weather += ' vis ' + self.obs['vis']
        return weather
    def run(self, station):
        obs = self.getStationData(station)
        self.extractObservations(obs)
        weather = self.createWeatherString(obs)
        print(weather)

if __name__ == '__main__':
    station = 'EFHK'
    metrics = MetarsConfMetric1()
    # metrics = MetarsConfImperial1()
    metars = Metars(metrics)
    metars.run(station)

